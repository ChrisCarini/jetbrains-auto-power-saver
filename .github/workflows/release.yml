# GitHub Actions Workflow created for handling the release process based on the draft release prepared
# with the Build workflow. Running the publishPlugin task requires the PUBLISH_TOKEN secret provided.

name: Release
on:
  release:
    types: [ prereleased, released ]

jobs:

  # Prepare and publish the plugin to the Marketplace repository
  release:
    name: Publish Plugin
    runs-on: ubuntu-latest
    environment: PROD_PUBLISH_PLUGIN
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.release.tag_name }}

      # Setup Java 17 environment for the next steps
      - name: Setup Java 17
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
        with:
          distribution: zulu
          java-version: 17
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
          ${{ github.event.release.body }}
          EOM
          )"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Update Unreleased section with the current release note
      - name: Patch Changelog
        if: ${{ steps.properties.outputs.changelog != '' }}
        env:
          CHANGELOG: ${{ steps.properties.outputs.changelog }}
        run: |
          ./gradlew patchChangelog --release-note="$CHANGELOG"

      # Publish the plugin to the Marketplace
      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
        run: ./gradlew publishPlugin

      # Upload artifact as a release asset
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} ./build/distributions/*

      # Create pull request
      - name: Create Pull Request
        if: ${{ steps.properties.outputs.changelog != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          BRANCH="changelog-update-$VERSION"

          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          git checkout -b $BRANCH
          git commit -am "Changelog update - $VERSION"
          git push --set-upstream origin $BRANCH
          
          # NOTE: THE BELOW PR DESCRIPTION IS TO GIVE DETAILS ON A WORKAROUND FOR A WORKFLOW-CREATED PR TO TRIGGER 
          #       SUBSEQUENT WORKFLOWS. SEE LINK BELOW FOR MORE DETAILS AND OTHER ALTERNATIVES:
          #       
          #       URL: https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#workarounds-to-trigger-further-workflow-runs
          #
          # Moving sed prog into variables; see https://stackoverflow.com/a/25021905
          SED_PROG1='s/^[[:space:]]*$//g'
          SED_PROG2='/./,$!d'
          # Unquoted heredoc to allow for variable expansion for $VERSION; see https://stackoverflow.com/a/4938198
          PR_BODY="$(cat <<-EOM | sed -e $SED_PROG1 -e $SED_PROG2
          Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version.

          ## ⚠️🛑⚠️🛑 **WARNING** 🛑⚠️🛑⚠️
          
          Because the default \`GITHUB_TOKEN\` is used to generate **this** PR from **within** a workflow, no checks will be run. Follow the below steps to have checks run as desired.
          
          ### Steps
          1. Click "Close pull request" on this PR
          2. Click "Reopen pull request" on this PR
          3. Approve this PR\'s changes
          EOM
          )"
          
          gh pr create \
            --title "Changelog update - \`$VERSION\`" \
            --body "$PR_BODY" \
            --base main \
            --label "merge when passing" \
            --head $BRANCH
